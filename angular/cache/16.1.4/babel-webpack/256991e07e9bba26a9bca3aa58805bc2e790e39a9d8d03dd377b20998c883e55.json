{"ast":null,"code":"import { map, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UsersService {\n  constructor(http) {\n    this.http = http;\n  }\n  getData(id) {\n    let url = \"https://api.worldbank.org/v2/country\" + '/' + id + '?format=json';\n    return this.http.get(url);\n  }\n  getMoreData(id) {\n    let restUrl = 'https://restcountries.com/v3.1/name/' + id + '?fullText=true';\n    return this.http.get(restUrl).pipe(tap(result => console.log(\"result\", result)), map(result => this.result = result));\n  }\n  getAllData() {\n    let allUrl = 'https://restcountries.com/v3.1/all?fields=name';\n    return this.http.get(allUrl);\n  }\n}\nUsersService.ɵfac = function UsersService_Factory(t) {\n  return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient));\n};\nUsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersService,\n  factory: UsersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["map","tap","UsersService","constructor","http","getData","id","url","get","getMoreData","restUrl","pipe","result","console","log","getAllData","allUrl","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MyPC\\Documents\\WGU\\worldMap\\src\\app\\users.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http'\nimport { MapsvgComponent } from './mapsvg/mapsvg.component'\nimport { map, tap } from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n  result: any;\n  constructor(private http: HttpClient) { }\n\n  getData(id: string)\n  {\n    let url = \"https://api.worldbank.org/v2/country\" + '/' + id + '?format=json';\n  \n    return this.http.get(url)\n  }\n\n  getMoreData(id: string)\n  {\n  let restUrl: any = 'https://restcountries.com/v3.1/name/' + id + '?fullText=true';\n    return this.http.get(restUrl).pipe(\n      tap((result) => console.log(\"result\", result)),\n      map((result) => (this.result = result))\n    )\n  }\n\n  getAllData(){\n    let allUrl: any = 'https://restcountries.com/v3.1/all?fields=name';\n    return this.http.get(allUrl)\n  }\n}\n"],"mappings":"AAGA,SAASA,GAAG,EAAEC,GAAG,QAAQ,gBAAgB;;;AAKzC,OAAM,MAAOC,YAAY;EAEvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,OAAOA,CAACC,EAAU;IAEhB,IAAIC,GAAG,GAAG,sCAAsC,GAAG,GAAG,GAAGD,EAAE,GAAG,cAAc;IAE5E,OAAO,IAAI,CAACF,IAAI,CAACI,GAAG,CAACD,GAAG,CAAC;EAC3B;EAEAE,WAAWA,CAACH,EAAU;IAEtB,IAAII,OAAO,GAAQ,sCAAsC,GAAGJ,EAAE,GAAG,gBAAgB;IAC/E,OAAO,IAAI,CAACF,IAAI,CAACI,GAAG,CAACE,OAAO,CAAC,CAACC,IAAI,CAChCV,GAAG,CAAEW,MAAM,IAAKC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,MAAM,CAAC,CAAC,EAC9CZ,GAAG,CAAEY,MAAM,IAAM,IAAI,CAACA,MAAM,GAAGA,MAAO,CAAC,CACxC;EACH;EAEAG,UAAUA,CAAA;IACR,IAAIC,MAAM,GAAQ,gDAAgD;IAClE,OAAO,IAAI,CAACZ,IAAI,CAACI,GAAG,CAACQ,MAAM,CAAC;EAC9B;;AAvBWd,YAAY,C;mBAAZA,YAAY,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAZlB,YAAY,C;SAAZA,YAAY;EAAAmB,OAAA,EAAZnB,YAAY,CAAAoB,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}